//
// Generated file, do not edit! Created by nedtool 5.0 from Messages/SM_UserVM.msg.
//

#ifndef __SM_USERVM_M_H
#define __SM_USERVM_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "SIMCAN_Message.h"
	#include "SM_UserVM_Finish_m.h"
	
	struct VM_Response
	{
	    //response
	    int nOperationResult;
		double startTime;
		int nPrice;
		std::string strIp;		
	};
	
    struct VM_Request
	{
	    //request
		std::string strVmType;	
		std::string strVmId; 	
		int maxStartTime_t1;
		int nRentTime_t2;	
		int maxSubTime_t3;
		int maxSubscriptionTime_t4;
		
		SM_UserVM_Finish* pMsg; 
			
		//List of different options offered by the servers	
		std::vector <VM_Response> responseList; 
	};
// }}

/**
 * Class generated from <tt>Messages/SM_UserVM.msg:38</tt> by nedtool.
 * <pre>
 * ///
 * /// SIMCAN Message for User requests
 * ///
 * message SM_UserVM extends SIMCAN_Message
 * {
 *     @customize(true);
 * 
 *     double dStartSubscriptionTime;
 *     double dEndSubscriptionTime;
 *     string strVmId;
 *     string userID;			// ID of the user instance
 *     VM_Request vms[];    	// List of the Virtual machines
 * }
 * </pre>
 *
 * SM_UserVM_Base is only useful if it gets subclassed, and SM_UserVM is derived from it.
 * The minimum code to be written for SM_UserVM is the following:
 *
 * <pre>
 * class SM_UserVM : public SM_UserVM_Base
 * {
 *   private:
 *     void copy(const SM_UserVM& other) { ... }

 *   public:
 *     SM_UserVM(const char *name=nullptr, int kind=0) : SM_UserVM_Base(name,kind) {}
 *     SM_UserVM(const SM_UserVM& other) : SM_UserVM_Base(other) {copy(other);}
 *     SM_UserVM& operator=(const SM_UserVM& other) {if (this==&other) return *this; SM_UserVM_Base::operator=(other); copy(other); return *this;}
 *     virtual SM_UserVM *dup() const {return new SM_UserVM(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from SM_UserVM_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(SM_UserVM);
 * </pre>
 */
class SM_UserVM_Base : public ::SIMCAN_Message
{
  protected:
    double dStartSubscriptionTime;
    double dEndSubscriptionTime;
    omnetpp::opp_string strVmId;
    omnetpp::opp_string userID;
    VM_Request *vms; // array ptr
    unsigned int vms_arraysize;

  private:
    void copy(const SM_UserVM_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SM_UserVM_Base&);
    // make constructors protected to avoid instantiation
    SM_UserVM_Base(const char *name=nullptr, int kind=0);
    SM_UserVM_Base(const SM_UserVM_Base& other);
    // make assignment operator protected to force the user override it
    SM_UserVM_Base& operator=(const SM_UserVM_Base& other);

  public:
    virtual ~SM_UserVM_Base();
    virtual SM_UserVM_Base *dup() const {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class SM_UserVM");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual double getDStartSubscriptionTime() const;
    virtual void setDStartSubscriptionTime(double dStartSubscriptionTime);
    virtual double getDEndSubscriptionTime() const;
    virtual void setDEndSubscriptionTime(double dEndSubscriptionTime);
    virtual const char * getStrVmId() const;
    virtual void setStrVmId(const char * strVmId);
    virtual const char * getUserID() const;
    virtual void setUserID(const char * userID);
    virtual void setVmsArraySize(unsigned int size);
    virtual unsigned int getVmsArraySize() const;
    virtual VM_Request& getVms(unsigned int k);
    virtual const VM_Request& getVms(unsigned int k) const {return const_cast<SM_UserVM_Base*>(this)->getVms(k);}
    virtual void setVms(unsigned int k, const VM_Request& vms);
};


#endif // ifndef __SM_USERVM_M_H

