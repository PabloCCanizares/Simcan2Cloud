//
// Generated file, do not edit! Created by nedtool 5.0 from Messages/SM_UserAPP.msg.
//

#ifndef __SM_USERAPP_M_H
#define __SM_USERAPP_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "SIMCAN_Message.h"
	#include "SM_UserAPP_Finish_m.h"	
	
    struct APP_Request
	{
	    //request
		std::string strApp;		
		std::string strIp;		
		std::string vmId;	
		int startTime;
		int finishTime;			
		tApplicationState eState;		
		SM_UserAPP_Finish* pMsgTimeout;
	};
// }}

/**
 * Class generated from <tt>Messages/SM_UserAPP.msg:25</tt> by nedtool.
 * <pre>
 * ///
 * /// SIMCAN Message for User requests
 * ///
 * message SM_UserAPP extends SIMCAN_Message
 * {
 *     @customize(true);
 * 
 *     string vmId;
 *     string userID;		// ID of the user instance
 *     APP_Request app[];  // List of applications
 *     int nFinishedApps;	// Number of finished applications.  
 *     bool finished; 	// If the cloudprovide has already notified the user
 * }
 * </pre>
 *
 * SM_UserAPP_Base is only useful if it gets subclassed, and SM_UserAPP is derived from it.
 * The minimum code to be written for SM_UserAPP is the following:
 *
 * <pre>
 * class SM_UserAPP : public SM_UserAPP_Base
 * {
 *   private:
 *     void copy(const SM_UserAPP& other) { ... }

 *   public:
 *     SM_UserAPP(const char *name=nullptr, int kind=0) : SM_UserAPP_Base(name,kind) {}
 *     SM_UserAPP(const SM_UserAPP& other) : SM_UserAPP_Base(other) {copy(other);}
 *     SM_UserAPP& operator=(const SM_UserAPP& other) {if (this==&other) return *this; SM_UserAPP_Base::operator=(other); copy(other); return *this;}
 *     virtual SM_UserAPP *dup() const {return new SM_UserAPP(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from SM_UserAPP_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(SM_UserAPP);
 * </pre>
 */
class SM_UserAPP_Base : public ::SIMCAN_Message
{
  protected:
    omnetpp::opp_string vmId;
    omnetpp::opp_string userID;
    APP_Request *app; // array ptr
    unsigned int app_arraysize;
    int nFinishedApps;
    bool finished;

  private:
    void copy(const SM_UserAPP_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SM_UserAPP_Base&);
    // make constructors protected to avoid instantiation
    SM_UserAPP_Base(const char *name=nullptr, int kind=0);
    SM_UserAPP_Base(const SM_UserAPP_Base& other);
    // make assignment operator protected to force the user override it
    SM_UserAPP_Base& operator=(const SM_UserAPP_Base& other);

  public:
    virtual ~SM_UserAPP_Base();
    virtual SM_UserAPP_Base *dup() const {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class SM_UserAPP");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getVmId() const;
    virtual void setVmId(const char * vmId);
    virtual const char * getUserID() const;
    virtual void setUserID(const char * userID);
    virtual void setAppArraySize(unsigned int size);
    virtual unsigned int getAppArraySize() const;
    virtual APP_Request& getApp(unsigned int k);
    virtual const APP_Request& getApp(unsigned int k) const {return const_cast<SM_UserAPP_Base*>(this)->getApp(k);}
    virtual void setApp(unsigned int k, const APP_Request& app);
    virtual int getNFinishedApps() const;
    virtual void setNFinishedApps(int nFinishedApps);
    virtual bool getFinished() const;
    virtual void setFinished(bool finished);
};


#endif // ifndef __SM_USERAPP_M_H

