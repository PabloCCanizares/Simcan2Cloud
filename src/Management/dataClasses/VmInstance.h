#ifndef VMINSTANCE_H_
#define VMINSTANCE_H_

#include "VirtualMachine.h"

/**
 *
 * Class that represents a Virtual Machine requested by a <b>CloudUserInstance</b>.
 *
 */
class VmInstance {

    private:

        /**
         * Name that unequivocally identifies this VM instance.
         */
        std::string vmInstanceID;

        /**
         * Type of the VM in the SIMCAN repository.
         */
        std::string vmType;

        /**
         * Instance number of this VM generated by <i>userID</i>.
         * This number refers to the position of this instance in the VMs vector (see <b>CloudUserInstance</b>).
         */
        int instanceNumber;

        /**
         * User that generated this VM instance.
         */
        std::string userID;

        /**
         * State of this VM instance.
         */
        tVmState state;


    public:

        /**
         * Constructor.
         *
         * Generates a unique name for this VM instance using the following syntax: <i>vmType</i>-<i>userID</i>-[<i>currentInstanceIndex</i>/<i>totalVmInstances</i>]
         *
         * @param vmType Type of this VM.
         * @param currentInstanceIndex Current instance number. First instance of this VM must be 0.
         * @param totalVmInstances Total number of VM instances to be created by <i>userID</i>. This parameter is only used to generate the <b>vmInstanceID</b>.
         * @param userID User that generated this VM instance.
         */
        VmInstance(std::string vmType, int currentInstanceIndex, int totalVmInstances, std::string userID);

        /**
         * Destructor.
         */
        virtual ~VmInstance();

        /**
         * Gets the ID that unequivocally identifies this VM instance.
         *
         * @return Name that unequivocally identifies this VM instance.
         */
        int getInstanceNumber() const;

        /**
         * Gets the current state of this VM instance.
         *
         * @return Current state of this VM instance.
         */
        tVmState getState() const;

        /**
         * Sets a new state for this VM instance.
         *
         * @param state New state for this VM instance.
         */
        void setState(tVmState state);

        /**
         * Gets the user ID that created this VM instance.
         *
         * @return User ID that created this VM instance.
         */
        const std::string& getUserId() const;

        /**
         * Gets the ID that unequivocally identifies this VM instance.
         *
         * @return ID that unequivocally identifies this VM instance.
         */
        const std::string& getVmInstanceId() const;

        /**
         * Gets the type of this VM instance.
         *
         * @return Type of this VM instance.
         */
        const std::string& getVmType() const;

        /**
         * Parses this VM instance into string format.
         *
         * @return String containing this VM instance into string format.
         */
        std::string toString ();


    private:

        /**
         * Parses the state of this VM into string format.
         *
         * @param vmState An state of this VM instance.
         * @return String containing the state of this VM.
         */
       std::string stateToString (tVmState vmState);
};

#endif /* VMINSTANCE_H_ */
